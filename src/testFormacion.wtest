import formacion.*
import vagones.*
import locomotoras.*

describe "Formacion" {
	const formacion = new Formacion()
	const pasajero_1 = new Pasajero(ancho=4, largo=10, tieneBanios=true)
	const pasajero_2 = new Pasajero(ancho=2, largo=7, tieneBanios=false, estaOrdenado=false)
	const carga_1 = new Carga(cargaMaximaIdeal=6800 , maderasSueltas=5)
	const dormitorio_1= new Dormitorio(cantidadCompartimientos=8, camasPorCompartimiento=3)

	

	method initialize() {
		formacion.desarmarFormacion()
		formacion.agregarVagon(pasajero_1)
		formacion.agregarVagon(pasajero_2)
		formacion.agregarVagon(carga_1)
		formacion.agregarVagon(dormitorio_1)
	}
	
	test "cuantos pasajeros puede llevar antes del Matenimiento" {
		assert.equals(165, formacion.cuantosPasajerosPuedeLLevar())
	}
	
	test "cuantos pasajeros puede llevar despues del mantenimiento" {
		formacion.realizarMantenimientoVagones()
		assert.equals(180, formacion.cuantosPasajerosPuedeLLevar())
	}
	
	test "cantidad vagones populares antes del Matenimiento" {
		assert.equals(1, formacion.cantidadVagonesPopulares())
	}
	
	test "cantidad vagones populares despues del mantenimiento" {
		formacion.realizarMantenimientoVagones()
		assert.equals(2, formacion.cantidadVagonesPopulares())
	}
	
	test "es formacion carguera antes del Matenimiento" {
		assert.notThat(formacion.esFormacionCarguera())
	}
	
	test "es formacion carguera despues del mantenimiento" {
		formacion.realizarMantenimientoVagones()
		assert.notThat(formacion.esFormacionCarguera())
	}

	test "dispersion de pesos antes del Matenimiento" {
		assert.equals(4220, formacion.dispersionDePesos())
	}
	
	test " dispersion de pesos despues del mantenimiento" {
		formacion.realizarMantenimientoVagones()
		assert.equals(3200, formacion.dispersionDePesos())
	}
	
	test "cantidad de baños antes del Matenimiento" {
		assert.equals(2, formacion.cantidDeBanios())
	}
	
	test " cantidad de baños despues del mantenimiento" {
		formacion.realizarMantenimientoVagones()
		assert.equals(2, formacion.cantidDeBanios())
	}
	
	test "no esta organizada " {
		assert.notThat(formacion.estaOrganizada())
	}
	
	test "esta organizada con ultimo de carga" {
		formacion.desarmarFormacion()
		formacion.agregarVagon(pasajero_1)
		formacion.agregarVagon(dormitorio_1)
		formacion.agregarVagon(pasajero_2)
		formacion.agregarVagon(carga_1)
		assert.that(formacion.estaOrganizada())		
	}

	test "esta organizada con sin vagones de carga" {
		formacion.desarmarFormacion()
		formacion.agregarVagon(pasajero_1)
		formacion.agregarVagon(dormitorio_1)
		formacion.agregarVagon(pasajero_2)
		assert.that(formacion.estaOrganizada())		
	}
	
	test "se verifica que la fomacion pesa 32800 kilos" {
		const locomotora1 = new Locomotora(peso=1000,arrastre=7000,velocidadMax=100)
		const locomotora2 = new Locomotora(peso=1000,arrastre=4000,velocidadMax=70)
		const locomotora3 = new Locomotora(peso=1000,arrastre=9000,velocidadMax=120)
		formacion.agregarLocomotora(locomotora1)
		formacion.agregarLocomotora(locomotora3)
		formacion.agregarLocomotora(locomotora2)
		assert.equals(32800,formacion.sumaDePesos())
	}
	
	test "la formación es eficiente" {
		const locomotora1 = new Locomotora(peso=1000,arrastre=7000,velocidadMax=100)
		const locomotora2 = new Locomotora(peso=1000,arrastre=4000,velocidadMax=70)
		const locomotora3 = new Locomotora(peso=1000,arrastre=9000,velocidadMax=120)
		formacion.agregarLocomotora(locomotora1)
		formacion.agregarLocomotora(locomotora3)
		assert.that(formacion.esEficiente())
	}

	test "la formación no es eficiente" {
		const locomotora1 = new Locomotora(peso=1000,arrastre=7000,velocidadMax=100)
		const locomotora2 = new Locomotora(peso=1000,arrastre=4000,velocidadMax=70)
		const locomotora3 = new Locomotora(peso=1000,arrastre=9000,velocidadMax=120)
		formacion.agregarLocomotora(locomotora1)
		formacion.agregarLocomotora(locomotora2)
		assert.notThat(formacion.esEficiente())
	}
	
	test "la formación no puede moverse" {
		const locomotora2 = new Locomotora(peso=1000,arrastre=4000,velocidadMax=70)
		formacion.agregarLocomotora(locomotora2)
		assert.notThat(formacion.puedeMoverse())
	}		
	
	test "la formación puede moverse" {
		const locomotora1 = new Locomotora(peso=1000,arrastre=20000,velocidadMax=100)
		const locomotora2 = new Locomotora(peso=1000,arrastre=4000,velocidadMax=70)
		const locomotora3 = new Locomotora(peso=1000,arrastre=20000,velocidadMax=120)
		formacion.agregarLocomotora(locomotora2)
		formacion.agregarLocomotora(locomotora1)
		formacion.agregarLocomotora(locomotora3)
		assert.that(formacion.puedeMoverse())
	}		
	
	
}